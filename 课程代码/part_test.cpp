#include "head.h"

class Optimization:public GrammaticalAnalysis
{
private:
    list<Quaternary>::iterator optimize_now;//当前优化四元式
    list<Quaternary>::iterator optimize_block_now;//优化后的当前块
    //list<Quaternary>::iterator block_now;//当前块指针
    list<Quaternary>::iterator qua;//四元式
    list<DAG>::iterator dag_head;//DAG头指针
    list<DAG>::iterator dag_tail;//DAG尾指针
    list<DAG>::iterator dag_now;//DAG当前指针

    list<Operand>::iterator find_now_num1;//当前查找词
    list<Operand>::iterator find_now_num2;//当前查找词 

    string find_now_ope;//当前查找运算符
    list<Operand>::iterator add_now;//当前需要加入的结点
    string op_now;//当前运算符
    list<DAG>::iterator find_begin;//查找开始处
    list<DAG>::iterator pos;//找到的位置

    list<Mark>::iterator mark_pos;//找到的标记位置
    list<DAG>::iterator temp_dag;//待交换标记所在的dag结点

    list<Mark>::iterator temp1;//待交换标记1
    list<Mark>::iterator temp2;//待交换标记2

    void CreateOptimize();//创建一个优化后四元式头部
    void CreateOptimize_Block();//创建一个优化后块头部
    void DivideBlock();//块划分函数
    void CoutBlock();//按基本块输出四元式
    void CreateDAG();//创建一个DAG
    void DeleteDAG();//删除DAG
    void AddDAG();//加入一个DAG点
    int FindDAG();//检查重复DAG结点
    int FindDAG_unary();//检查单目运算符重复DAG结点
    int FindDAG_Bi();//检查双目运算符重复DAG结点
    int MainMark();//检查该标记是不是主标记
    void SwopMark();//交换两个标记
    void DeleteMark();//删除一个标记
    void GetDAG();//得到DAG生成结果
    void CoutOptimize();//输出优化后的四元式

public:
    list<Quaternary>::iterator optimize;//优化四元式
    list<Quaternary>::iterator optimize_block;//优化后的块
    list<Quaternary>::iterator block;//块指针
    list<Quaternary>::iterator quater;//四元式 
    void Optimize();
    Optimization(){}    //构造函数无需执行任何操作
};

void Optimization::Optimize(){
    quater = Q_list.begin();
	qua=quater;           //quater就是Q_list.begin()
    DivideBlock();//划分基本块
    CoutBlock();//按基本块输出
}

void Optimization::DivideBlock()//划分块
{
    Block_list.clear();
	Block_list.resize(Block_list.size() + 1);//基本块链表 
    list<list<Quaternary> >::iterator block_now = --(Block_list.end());//基本块链表中最后一个块 
    list<Quaternary>::iterator p = qua;//四元式 
    while(p!=Q_list.end())
    {
        if((*((*p).Operator)=="if")||(*((*p).Operator)=="el")||(*((*p).Operator)=="wh")||
            (*((*p).Operator)=="do")||(*((*p).Operator)=="we")||(*((*p).Operator)=="gt"))
        {
            (*block_now).push_back((*p));
			Block_list.resize(Block_list.size() + 1);//上一个基本块结束，新建一个基本块 
			block_now = --(Block_list.end());
			p++;
        }
        else if((*((*p).Operator)=="ie")||(*((*p).Operator)=="lb"))
        {
            Block_list.resize(Block_list.size() + 1);//上一个基本块结束，新建一个基本块 
			block_now = --(Block_list.end());
			(*block_now).push_back((*p));
			p++; 
        }
        else
        {
            (*block_now).push_back((*p));
            p++;
        }
    }
    if((*block_now).size() == 0)
    {
    	Block_list.pop_back();
	}
}

void Optimization::CoutBlock()//按基本块输出
{
    list<list<Quaternary> >::iterator block_now;
    list<Quaternary>::iterator p;
    int i = 0;
    cout << "优化前的四元式" << endl;
	for(block_now = Block_list.begin(); block_now != Block_list.end(); block_now++)
    {
    	cout << "基本块" << ++i << ":" << endl;
    	for(p = (*block_now).begin(); p != (*block_now).end(); p++)
	    {//输出队列中的全部四元式
	        cout<<"("<<*((*p).Operator);
	        for(vector<Operand>::iterator it=(*p).operand.begin();it!=(*p).operand.end();it++)
	        {
	            if(  ((*(*it).tpToken).token)=="ZT" )       {cout<<","<<(*(*((*it).tpToken)).tpI).numi;}
	            else if(((*(*it).tpToken).token)=="RT")     {cout<<","<<(*(*((*it).tpToken)).tpR).numf;}
	            else if(((*(*it).tpToken).token)=="CT")     {cout<<","<<(*(*((*it).tpToken)).tpC).numc;}
	            else if(((*(*it).tpToken).token)=="IT")     {cout<<","<<(*(*((*it).tpToken)).tpIT).name;}
	            else if(((*(*it).tpToken).token)=="99")     {cout<<",t"<<(*((*it).tpToken)).line;}
	            else if(((*(*it).tpToken).token)=="NULL")     cout<<",_";
	            //注意这里临时变量的考虑 后续还需要进行修改
	        }
	        cout<<")"<<endl;
	    }
	}
}
